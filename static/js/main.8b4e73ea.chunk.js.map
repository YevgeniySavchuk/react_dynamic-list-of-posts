{"version":3,"sources":["api/api.ts","api/posts.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/users.ts","components/UserSelect/UserSelect.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getUserPosts","userId","a","endpoint","fetch","response","json","post","getPostDetails","postId","postDetails","Loader","className","PostsList","selectedUser","selectedPostId","handleSelectedPost","useState","posts","setPosts","isPostLoaded","setIsPostLoaded","getPosts","useCallback","userPosts","useEffect","map","isOpen","id","title","type","onClick","getPostComments","comments","removeComment","commentId","method","addComment","newComment","headers","body","JSON","stringify","NewCommentForm","handleAddComment","name","setName","email","setEmail","setBody","isNameValid","setIsNameValid","isEmailValid","setIsEmailValid","isBodyValid","setIsBodyValid","onSubmit","event","preventDefault","trim","handleSubmit","value","placeholder","onChange","target","PostDetails","details","setDetails","isDetailsLoaded","setIsDetailsLoaded","setComments","isCommentsVisible","setIsCommentsVisible","isCommentsLoading","setIsCommentsLoading","Promise","all","userPostDetails","userPostComments","updateComments","then","handleRemoveComment","isComments","useMemo","length","condition","showCommentsButton","comment","getUsers","UserSelect","handleSelectedUser","users","setUsers","getAllUsers","allUsers","slice","user","App","setSelectedUser","setSelectedPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8b4e73ea.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\nimport { Post } from '../types/Post';\n\nexport const getUserPosts = async (userId: number): Promise<Post[]> => {\n  const endpoint = userId === 0 ? '/posts' : `/posts?userId=${userId}`;\n\n  const response = await fetch(`${BASE_URL}${endpoint}`);\n\n  const post: Post[] = await response.json();\n\n  return post;\n};\n\nexport const getPostDetails = async (postId: number): Promise<Post> => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  const postDetails: Post = await response.json();\n\n  return postDetails;\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { getUserPosts } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\ninterface Props {\n  selectedUser: string,\n  selectedPostId: number | null,\n  handleSelectedPost: (postId: number) => void,\n}\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUser,\n  selectedPostId,\n  handleSelectedPost,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isPostLoaded, setIsPostLoaded] = useState(false);\n\n  const getPosts = useCallback(async () => {\n    const userPosts = await getUserPosts(+selectedUser);\n\n    setPosts(userPosts);\n    setIsPostLoaded(true);\n  }, [selectedUser]);\n\n  useEffect(() => {\n    getPosts();\n  }, [selectedUser]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul\n        className=\"PostsList__list\"\n        data-cy=\"postDetails\"\n      >\n        {!isPostLoaded && <Loader />}\n        {isPostLoaded && posts.map(post => {\n          const isOpen = selectedPostId === post.id;\n\n          return (\n            <li key={post.id} className=\"PostsList__item\">\n              <div>\n                <b>{`[User #${post.userId}]: `}</b>\n                {post.title}\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => handleSelectedPost(post.id)}\n              >\n                {isOpen ? 'Close' : 'Open'}\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\nimport { Comment } from '../types/Comment';\nimport { NewComment } from '../types/NewComment';\n\nexport const getPostComments = async (postId: number): Promise<Comment[]> => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  const comments: Comment[] = await response.json();\n\n  return comments;\n};\n\nexport const removeComment = async (commentId: number): Promise<Comment> => {\n  const response = await fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n\n  return response.json();\n};\n\nexport const addComment = async (newComment: NewComment): Promise<Comment> => {\n  const response = await fetch(`${BASE_URL}/comments/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport { NewComment } from '../../types/NewComment';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  handleAddComment: (newComment: NewComment) => void;\n  selectedPostId: number | null,\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  handleAddComment,\n  selectedPostId,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isNameValid, setIsNameValid] = useState(true);\n  const [isEmailValid, setIsEmailValid] = useState(true);\n  const [isBodyValid, setIsBodyValid] = useState(true);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!name.trim()) {\n      setIsNameValid(false);\n\n      return;\n    }\n\n    if (!email.trim()) {\n      setIsEmailValid(false);\n\n      return;\n    }\n\n    if (!body.trim()) {\n      setIsBodyValid(false);\n\n      return;\n    }\n\n    if (selectedPostId) {\n      const newComment: NewComment = {\n        postId: selectedPostId,\n        name,\n        email,\n        body,\n      };\n\n      handleAddComment(newComment);\n      setName('');\n      setEmail('');\n      setBody('');\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => handleSubmit(event)}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => {\n            setName(target.value);\n            setIsNameValid(true);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => {\n            setEmail(target.value);\n            setIsEmailValid(true);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={({ target }) => {\n            setBody(target.value);\n            setIsBodyValid(true);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n\n      <div className=\"NewCommentForm__error\">\n        {!isNameValid && '*Please enter a name'}\n        {!isEmailValid && '*Please enter your email'}\n        {!isBodyValid && '*Please enter a message'}\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { addComment, getPostComments, removeComment } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Comment } from '../../types/Comment';\nimport './PostDetails.scss';\nimport { NewComment } from '../../types/NewComment';\n\ninterface Props {\n  selectedPostId: number | null,\n}\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [details, setDetails] = useState<Post | null>(null);\n  const [isDetailsLoaded, setIsDetailsLoaded] = useState(false);\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [isCommentsVisible, setIsCommentsVisible] = useState(true);\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n\n  const handleCommentsVisibility = () => {\n    setIsCommentsVisible(!isCommentsVisible);\n  };\n\n  const postDetails = async () => {\n    if (selectedPostId) {\n      try {\n        setIsDetailsLoaded(true);\n\n        const [userPostDetails, userPostComments] = await Promise.all([\n          getPostDetails(selectedPostId),\n          getPostComments(selectedPostId),\n        ]);\n\n        setDetails(userPostDetails);\n        setComments(userPostComments);\n      } finally {\n        setIsDetailsLoaded(false);\n      }\n    } else {\n      setDetails(null);\n      setComments(null);\n    }\n  };\n\n  useEffect(() => {\n    postDetails();\n  }, [selectedPostId]);\n\n  const updateComments = () => {\n    if (selectedPostId) {\n      getPostComments(selectedPostId)\n        .then(response => setComments(response));\n    }\n  };\n\n  const handleRemoveComment = async (commentId: number) => {\n    try {\n      setIsCommentsLoading(true);\n      await removeComment(commentId);\n    } finally {\n      setIsCommentsLoading(false);\n      updateComments();\n    }\n  };\n\n  const handleAddComment = async (newComment: NewComment) => {\n    try {\n      setIsCommentsLoading(true);\n      await addComment(newComment);\n    } finally {\n      setIsCommentsLoading(false);\n      updateComments();\n    }\n  };\n\n  const isComments = useMemo(() => {\n    return comments && comments.length > 0;\n  }, [comments]);\n\n  const showCommentsButton = () => {\n    const length = comments?.length;\n    const condition = `${length} ${length === 1 ? 'comment' : 'comments'}`;\n\n    if (isCommentsVisible) {\n      return `Hide ${condition}`;\n    }\n\n    return `Show ${condition}`;\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      {isDetailsLoaded && <Loader />}\n      {!isDetailsLoaded && (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{details?.body}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            {details?.body && !isComments && (\n              <button\n                type=\"button\"\n                className=\"button PostDetails__nocomments\"\n              >\n                No comments\n              </button>\n            )}\n\n            {details?.body && isComments && (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={handleCommentsVisibility}\n              >\n                {showCommentsButton()}\n              </button>\n            )}\n\n            {isCommentsLoading && <Loader />}\n            {!isCommentsLoading && (\n              <ul\n                className=\"PostDetails__list\"\n                data-cy=\"postDetails\"\n              >\n                {isCommentsVisible && comments?.map(comment => (\n                  <li key={comment.id} className=\"PostDetails__list-item\">\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => handleRemoveComment(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n\n          </section>\n\n          {details?.body && (\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm\n                  handleAddComment={handleAddComment}\n                  selectedPostId={selectedPostId}\n                />\n              </div>\n            </section>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getUsers = async () => {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { getUsers } from '../../api/users';\nimport { User } from '../../types/User';\n\ninterface Props {\n  selectedUser: string,\n  handleSelectedUser: (id: string) => void,\n}\n\nexport const UserSelect: React.FC<Props> = ({\n  selectedUser,\n  handleSelectedUser,\n}) => {\n  const [users, setUsers] = useState<User[]>([]);\n\n  const getAllUsers = useCallback(async () => {\n    const allUsers = await getUsers();\n\n    setUsers(allUsers.slice(0, 10));\n  }, []);\n\n  useEffect(() => {\n    getAllUsers();\n  }, []);\n\n  return (\n    <label>\n      Select a user: &nbsp;\n\n      <select\n        className=\"App__user-selector\"\n        value={selectedUser}\n        onChange={({ target }) => handleSelectedUser(target.value)}\n      >\n        <option value=\"0\">All users</option>\n        {users.map(user => (\n          <option key={user.id} value={user.id}>{user.name}</option>\n        ))}\n      </select>\n    </label>\n  );\n};\n","import React, { useCallback, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect';\n\nconst App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState('0');\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n\n  const handleSelectedUser = (id: string) => {\n    setSelectedUser(id);\n    setSelectedPostId(null);\n  };\n\n  const handleSelectedPost = useCallback((id: number) => {\n    if (selectedPostId === id) {\n      setSelectedPostId(null);\n    } else {\n      setSelectedPostId(id);\n    }\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          selectedUser={selectedUser}\n          handleSelectedUser={handleSelectedUser}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUser={selectedUser}\n            selectedPostId={selectedPostId}\n            handleSelectedPost={handleSelectedPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails\n            selectedPostId={selectedPostId}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}